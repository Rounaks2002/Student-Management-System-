from tkinter import *  # to import all classes of gui window;
import time
import ttkthemes
from tkinter import ttk, messagebox, filedialog
import pymysql
import pandas

# FUNCTIONALITY PART

count = 0
text = ''


def iexit():
    result = messagebox.askyesno('Confirm', 'Do you want to exit')
    if result:
        root.destroy()
    else:
        pass


def export_data():
    url = filedialog.asksaveasfilename(defaultextension='.csv')
    indexing = studentTable.get_children()  # give index all the row
    newlist = []
    for index in indexing:
        content = studentTable.item(index)
        datalist = content['values']
        newlist.append(datalist)

    table = pandas.DataFrame(newlist,
                             columns=['Id', 'Name', 'Mobile', 'Email', 'Address', 'Gender', 'DOB', 'Added Date',
                                      'Added Time'])
    table.to_csv(url, index=False)
    messagebox.showinfo('Success', 'Data is saved successfully')


def update_student():
    def update_data():
        query = 'update student set name=%s,mobile=%s,email=%s,address=%s,gender=%s,dob=%s,date=%s,time=%s where id=%s'
        mycursor.execute(query, (
            nameentry.get(), phoneentry.get(), emailentry.get(), addressentry.get(), genderentry.get(),
            dobentry.get(), date, currenttime, identry.get()))

        con.commit()
        messagebox.showinfo('Succes', f'Id{identry.get()} is modified succesfully', parent=update_window)
        update_window.destroy()
        show_student()

    update_window = Toplevel()
    update_window.title('Update Student')
    update_window.grab_set()  # Don't allow to touch any other except the top level window
    update_window.resizable(False, False)
    idlabel = Label(update_window, text='Id', font=('monospace', 20, 'bold'))
    idlabel.grid(row=0, column=0, padx=30, pady=15, sticky=W)
    identry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    identry.grid(row=0, column=1, pady=15, padx=10)

    namelabel = Label(update_window, text='Name', font=('monospace', 20, 'bold'))
    namelabel.grid(row=1, column=0, padx=30, pady=15, sticky=W)
    nameentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    nameentry.grid(row=1, column=1, pady=15, padx=10)

    phonelabel = Label(update_window, text='Phone', font=('monospace', 20, 'bold'))
    phonelabel.grid(row=2, column=0, padx=30, pady=15, sticky=W)
    phoneentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    phoneentry.grid(row=2, column=1, pady=15, padx=10)

    emaillabel = Label(update_window, text='Email', font=('monospace', 20, 'bold'))
    emaillabel.grid(row=3, column=0, padx=30, pady=15, sticky=W)
    emailentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    emailentry.grid(row=3, column=1, pady=15, padx=10)

    addresslabel = Label(update_window, text='Address', font=('monospace', 20, 'bold'))
    addresslabel.grid(row=4, column=0, padx=30, pady=15, sticky=W)
    addressentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    addressentry.grid(row=4, column=1, pady=15, padx=10)

    genderlabel = Label(update_window, text='Gender', font=('monospace', 20, 'bold'))
    genderlabel.grid(row=5, column=0, padx=30, pady=15, sticky=W)
    genderentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    genderentry.grid(row=5, column=1, pady=15, padx=10)

    doblabel = Label(update_window, text='D.O.B', font=('monospace', 20, 'bold'))
    doblabel.grid(row=6, column=0, padx=30, pady=15, sticky=W)
    dobentry = Entry(update_window, font=('monospace', 15, 'bold'), width=24)
    dobentry.grid(row=6, column=1, pady=15, padx=10)

    update_student_button = ttk.Button(update_window, text='UPDATE STUDENT', command=update_data)
    update_student_button.grid(row=7, columnspan=2, pady=15)

    indexing = studentTable.focus()  # update student by targeting indexing

    content = studentTable.item(indexing)
    listdata = content['values']
    identry.insert(0, listdata[0])
    nameentry.insert(0, listdata[1])
    phoneentry.insert(0, listdata[2])
    emailentry.insert(0, listdata[3])
    addressentry.insert(0, listdata[4])
    genderentry.insert(0, listdata[5])
    dobentry.insert(0, listdata[6])


def show_student():
    query = 'select * from student'
    mycursor.execute(query)
    fetched_data = mycursor.fetchall()
    studentTable.delete(*studentTable.get_children())
    for data in fetched_data:
        studentTable.insert('', END, values=data)


def delete_student():
    indexing = studentTable.focus()
    print(indexing)
    content = studentTable.item(indexing)
    content_id = content['values'][0]
    query = 'delete from student where id=%s'
    mycursor.execute(query, content_id)
    con.commit()
    messagebox.showinfo('Deleted', f'ID {content_id} is deleted succesfully')
    query = 'select * from student'
    mycursor.execute(query)
    fetched_data = mycursor.fetchall()
    studentTable.delete(*studentTable.get_children())
    for data in fetched_data:
        studentTable.insert('', END, values=data)


def search_student():
    def search_data():
        query = 'select * from student where id= %s or name=%s or email= %s or mobile =%s or address=%s or gender=%s or dob =%s'
        mycursor.execute(query, (
            identry.get(), nameentry.get(), emailentry.get(), phoneentry.get(), addressentry.get(), genderentry.get(),
            dobentry.get()))
        studentTable.delete(*studentTable.get_children())
        fetched_data = mycursor.fetchall()
        for data in fetched_data:
            studentTable.insert('', END, values=data)

    search_window = Toplevel()
    search_window.title('Search Student')
    search_window.grab_set()  # Don't allow to touch any other except the top level window
    search_window.resizable(False, False)
    idlabel = Label(search_window, text='Id', font=('monospace', 20, 'bold'))
    idlabel.grid(row=0, column=0, padx=30, pady=15, sticky=W)
    identry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    identry.grid(row=0, column=1, pady=15, padx=10)

    namelabel = Label(search_window, text='Name', font=('monospace', 20, 'bold'))
    namelabel.grid(row=1, column=0, padx=30, pady=15, sticky=W)
    nameentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    nameentry.grid(row=1, column=1, pady=15, padx=10)

    phonelabel = Label(search_window, text='Phone', font=('monospace', 20, 'bold'))
    phonelabel.grid(row=2, column=0, padx=30, pady=15, sticky=W)
    phoneentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    phoneentry.grid(row=2, column=1, pady=15, padx=10)

    emaillabel = Label(search_window, text='Email', font=('monospace', 20, 'bold'))
    emaillabel.grid(row=3, column=0, padx=30, pady=15, sticky=W)
    emailentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    emailentry.grid(row=3, column=1, pady=15, padx=10)

    addresslabel = Label(search_window, text='Address', font=('monospace', 20, 'bold'))
    addresslabel.grid(row=4, column=0, padx=30, pady=15, sticky=W)
    addressentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    addressentry.grid(row=4, column=1, pady=15, padx=10)

    genderlabel = Label(search_window, text='Gender', font=('monospace', 20, 'bold'))
    genderlabel.grid(row=5, column=0, padx=30, pady=15, sticky=W)
    genderentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    genderentry.grid(row=5, column=1, pady=15, padx=10)

    doblabel = Label(search_window, text='D.O.B', font=('monospace', 20, 'bold'))
    doblabel.grid(row=6, column=0, padx=30, pady=15, sticky=W)
    dobentry = Entry(search_window, font=('monospace', 15, 'bold'), width=24)
    dobentry.grid(row=6, column=1, pady=15, padx=10)

    search_student_button = ttk.Button(search_window, text='SEARCH STUDENT', command=search_data)
    search_student_button.grid(row=7, columnspan=2, pady=15)


def add_student():
    def add_data():
        if identry.get() == '' or nameentry.get() == '' or phoneentry.get() == '' or emailentry.get() == '' or \
                genderentry.get() == '' or addressentry.get() == '' or genderentry.get() == '' or dobentry.get() == '':
            messagebox.showerror('Error', 'All Fields are required', parent=add_window)

        else:
            try:
                query = 'insert into student values(%s,%s,%s,%s,%s,%s,%s,%s,%s)'
                mycursor.execute(query, (
                    identry.get(), nameentry.get(), phoneentry.get(), emailentry.get(), addressentry.get(),
                    genderentry.get(),
                    dobentry.get(), date, currenttime))

                # When you have change or update the database, you have to commit something
                con.commit()
                result = messagebox.askyesno('Confirm', 'Data added succesfully. Do you want to clean the form?',
                                             parent=add_window)
                if result:
                    identry.delete(0, END)
                    nameentry.delete(0, END)
                    phoneentry.delete(0, END)
                    emailentry.delete(0, END)
                    addressentry.delete(0, END)
                    genderentry.delete(0, END)
                    dobentry.delete(0, END)

                else:
                    pass
            except:
                messagebox.showerror('Error', 'Id cannot be repeated', parent=add_window)
                return

            # Fetching the date from sql to database
            query = 'select *from student'
            mycursor.execute(query)
            fetched_data = mycursor.fetchall()
            studentTable.delete(*studentTable.get_children())  # delete previous data and update data
            for data in fetched_data:
                datalist = list(data)
                studentTable.insert('', END, values=datalist)

    add_window = Toplevel()
    add_window.grab_set()  # Don't allow to touch any other except the top level window
    add_window.resizable(False, False)
    idlabel = Label(add_window, text='Id', font=('monospace', 20, 'bold'))
    idlabel.grid(row=0, column=0, padx=30, pady=15, sticky=W)
    identry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    identry.grid(row=0, column=1, pady=15, padx=10)

    namelabel = Label(add_window, text='Name', font=('monospace', 20, 'bold'))
    namelabel.grid(row=1, column=0, padx=30, pady=15, sticky=W)
    nameentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    nameentry.grid(row=1, column=1, pady=15, padx=10)

    phonelabel = Label(add_window, text='Phone', font=('monospace', 20, 'bold'))
    phonelabel.grid(row=2, column=0, padx=30, pady=15, sticky=W)
    phoneentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    phoneentry.grid(row=2, column=1, pady=15, padx=10)

    emaillabel = Label(add_window, text='Email', font=('monospace', 20, 'bold'))
    emaillabel.grid(row=3, column=0, padx=30, pady=15, sticky=W)
    emailentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    emailentry.grid(row=3, column=1, pady=15, padx=10)

    addresslabel = Label(add_window, text='Address', font=('monospace', 20, 'bold'))
    addresslabel.grid(row=4, column=0, padx=30, pady=15, sticky=W)
    addressentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    addressentry.grid(row=4, column=1, pady=15, padx=10)

    genderlabel = Label(add_window, text='Gender', font=('monospace', 20, 'bold'))
    genderlabel.grid(row=5, column=0, padx=30, pady=15, sticky=W)
    genderentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    genderentry.grid(row=5, column=1, pady=15, padx=10)

    doblabel = Label(add_window, text='D.O.B', font=('monospace', 20, 'bold'))
    doblabel.grid(row=6, column=0, padx=30, pady=15, sticky=W)
    dobentry = Entry(add_window, font=('monospace', 15, 'bold'), width=24)
    dobentry.grid(row=6, column=1, pady=15, padx=10)

    add_student_button = ttk.Button(add_window, text='ADD STUDENT', command=add_data)
    add_student_button.grid(row=7, columnspan=2, pady=15)


def slider():
    global text, count
    if count == len(s):
        count = 0
        text = ''
    text = text + s[count]
    sliderlabel.config(text=text)
    count += 1
    sliderlabel.after(300, slider)


def clock():
    global date, currenttime
    date = time.strftime('%d.%m.%y')
    currenttime = time.strftime('%H:%M:%S')
    datetimelabel.config(
        text=f'Date: {date}\nTime: {currenttime}')  #config method to update , f used to concatinate the string with variable;
    datetimelabel.after(1000, clock)  # after 1 sec again calling the clock function to update


def connect_database():
    def connect():
        global mycursor, con
        try:
            con = pymysql.connect(host=hostentry.get(), user=userentry.get(),
                                  password=Passwordentry.get())  # Connect with mysql by pymysql module
            mycursor = con.cursor()  # executing the command like edit and add

        except:
            messagebox.showerror('Error', 'Invalid Details', parent=connectwindow)
            return

        try:
            query = 'create database studentmanagementsystem'
            mycursor.execute(query)
            query = 'use studentmanagementsystem'
            mycursor.execute(query)
            query = 'create table student(id int not null primary key, name varchar(30), mobile varchar(10), ' \
                    'email varchar(30),address varchar(100), gender varchar(20), dob varchar(50),date varchar(50), time varchar(50))'
            mycursor.execute(query)
        except:
            query = 'use studentmanagementsystem'
            mycursor.execute(query)
        messagebox.showinfo('Success', 'Database Connection is successful', parent=connectwindow)
        connectwindow.destroy()
        addstudentbutton.config(state=NORMAL)
        searchstudentbutton.config(state=NORMAL)
        deletestudentbutton.config(state=NORMAL)
        updatestudentbutton.config(state=NORMAL)
        showstudentbutton.config(state=NORMAL)
        exportstudentbutton.config(state=NORMAL)
        exitbutton.config(state=NORMAL)

    connectwindow = Toplevel()  # Another class to make gui window
    connectwindow.grab_set()
    connectwindow.geometry('470x250+550+230')
    connectwindow.resizable(0, 0)

    hostnameLabel = Label(connectwindow, text='Host Name', font=('monospace', 20, 'bold'), bd=2)  # bd = border width 2
    hostnameLabel.grid(row=0, column=0, padx=20)

    hostentry = Entry(connectwindow, font=('roman', 15, 'bold'), bd=2)
    hostentry.grid(row=0, column=1, padx=40, pady=20)

    usernameLabel = Label(connectwindow, text='User Name', font=('monospace', 20, 'bold'), bd=2)  # bd = border width 2
    usernameLabel.grid(row=1, column=0, padx=20)

    userentry = Entry(connectwindow, font=('roman', 15, 'bold'), bd=2)
    userentry.grid(row=1, column=1, padx=40, pady=20)

    PasswordLabel = Label(connectwindow, text='Password', font=('monospace', 20, 'bold'), bd=2)  # bd = border width 2
    PasswordLabel.grid(row=2, column=0, padx=20)

    Passwordentry = Entry(connectwindow, font=('roman', 15, 'bold'), bd=2)
    Passwordentry.grid(row=2, column=1, padx=40, pady=20)

    connectbutton = ttk.Button(connectwindow, text='CONNECT', command=connect)
    connectbutton.grid(row=3, columnspan=2)


# GUI PART
root = ttkthemes.ThemedTk()  # to creating the window ,ttkthemes work as tk class but additionaly has themes

root.get_themes()  # get all themes

root.set_theme('yaru')  # set theme name

root.geometry('1280x720+0+0')
root.resizable(False, False)
root.title('Student Management System')

datetimelabel = Label(root, text='hello', font=('monospace', 14))  # create the label but not place it
datetimelabel.place(x=5, y=5)  # place the label
clock()
# Create slider
s = 'Student Management System'
sliderlabel = Label(root, font=('Sans Serif', 28, 'italic bold'), width=30)
sliderlabel.place(x=200, y=0)
slider()

# Create connecting button
connectbutton = ttk.Button(root, text='Connect Database',
                           command=connect_database)  # command to connect database function.
connectbutton.place(x=1100, y=0)

# Create the left frame
leftframe = Frame(root)
leftframe.place(x=50, y=80, width=300, height=630)

# Create the logo image
logo_image = PhotoImage(file='student.png')
logo_label = Label(leftframe, image=logo_image)
logo_label.grid(row=0, column=0)  # palcing subjects according to row and column

addstudentbutton = ttk.Button(leftframe, text='Add Student', width=20, state=DISABLED, command=add_student)
addstudentbutton.grid(row=1, column=0, pady=20)

searchstudentbutton = ttk.Button(leftframe, text='Search Student', width=20, state=DISABLED, command=search_student)
searchstudentbutton.grid(row=2, column=0, pady=20)

deletestudentbutton = ttk.Button(leftframe, text='Delete Student', width=20, state=DISABLED, command=delete_student)
deletestudentbutton.grid(row=3, column=0, pady=20)

updatestudentbutton = ttk.Button(leftframe, text='Update Student', width=20, state=DISABLED, command=update_student)
updatestudentbutton.grid(row=4, column=0, pady=20)

showstudentbutton = ttk.Button(leftframe, text='Show Student', width=20, state=DISABLED, command=show_student)
showstudentbutton.grid(row=5, column=0, pady=20)

exportstudentbutton = ttk.Button(leftframe, text='Export Data', width=20, state=DISABLED, command=export_data)
exportstudentbutton.grid(row=6, column=0, pady=20)

exitbutton = ttk.Button(leftframe, text='Exit', width=20, state=DISABLED, command=iexit)
exitbutton.grid(row=7, column=0, pady=20)

# Create the right frame
rightframe = Frame(root)
rightframe.place(x=350, y=80, width=900, height=630)

# Create the Scroll Bar
scrollBarX = Scrollbar(rightframe, orient=HORIZONTAL)
scrollBarY = Scrollbar(rightframe, orient=VERTICAL)

# ttk treeview

studentTable = ttk.Treeview(rightframe, show="headings", columns=('Id', 'Name', 'Mobile', 'Email', 'Address', 'Gender',
                                                                  'D.O.B', 'Added Date', 'Added Time'),
                            xscrollcommand=scrollBarX.set, yscrollcommand=scrollBarY.set)

scrollBarX.config(command=studentTable.xview)
scrollBarY.config(command=studentTable.yview)

scrollBarX.pack(side=BOTTOM, fill=X)
scrollBarY.pack(side=RIGHT, fill=Y)

studentTable.pack(expand=1, fill=BOTH)

studentTable.heading('Id', text='Id')
studentTable.heading('Name', text='Name')
studentTable.heading('Mobile', text='Mobile No')
studentTable.heading('Email', text='Email Address')
studentTable.heading('Address', text='Address')
studentTable.heading('Gender', text='Gender')
studentTable.heading('D.O.B', text='D.O.B')
studentTable.heading('Added Date', text='Added Date')
studentTable.heading('Added Time', text='Added Time')

studentTable.column('Id', width=50, anchor=CENTER)
studentTable.column('Name', width=300, anchor=CENTER)
studentTable.column('Email', width=300, anchor=CENTER)
studentTable.column('Mobile', width=200, anchor=CENTER)
studentTable.column('Address', width=300, anchor=CENTER)
studentTable.column('Gender', width=100, anchor=CENTER)
studentTable.column('D.O.B', width=100, anchor=CENTER)
studentTable.column('Added Date', width=200, anchor=CENTER)
studentTable.column('Added Time', width=200, anchor=CENTER)

style = ttk.Style()

style.configure('Treeview', rowheight=40, font=('monospace', 10, 'bold'))
style.configure('Treeview.Heading', font=('arial', 12, 'bold'))

root.mainloop()  # to keep the window on loop to see it
